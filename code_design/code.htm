<!--
    Powered By nodePPT - This is probably the best web presentation tool so far!
    version: 1.4.2
    site: https://github.com/ksky521/nodePPT
    date: 2017年06月07日
-->
<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <title>php设计模式 - By 李凯</title>
    <link rel="stylesheet" media="all" href="./css/nodeppt.css">
    <link rel="stylesheet" media="only screen and (max-device-width: 480px)" href="./css/phone.css">
    
    <link rel="stylesheet" href="./js/highlight/styles/monokai_sublime.css">
    <link rel="stylesheet" href="./css/font-awesome.css">
    <link rel="stylesheet" href="./css.css">
<link rel="stylesheet" href="./css/theme.dark.css">
</head>
<body>
<div class="slides">
    <slides id="container">
        <slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>分享题目：PHP设计模式</h1>
<h1>分享者：李凯</h1>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>“设计模式描述了软件设计过程中某一类常见问题的一般性的解决方案。”</h1>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<p>这就是今天我要分享的的，如何基于基本设计原则（基本的几何运算法则），推演得到设计模式（各类公式）。
从而解决问题。</p>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>设计模式有哪些？</h1>
<ul>
<li>创建型设计模式: 创建对象时使用，将某个对象从实现中解耦合。</li>
<li>行为型设计模式：用于在不同的对象之间管理算法、关系以及职责</li>
<li>结构型设计模式：用于在不同的对象之间构造大的对象结构。</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>创建型设计模式</h1>
<ul>
<li>单例模式</li>
<li>工厂方法模式</li>
<li>抽象工厂模式</li>
<li>建造者模式</li>
<li>原型模式</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>行为型设计模式</h1>
<ul>
<li>观察者模式</li>
<li>策略模式</li>
<li>模版方法模式、</li>
<li>命令模式、</li>
<li>迭代器模式、</li>
<li>中介者模式、</li>
<li>状态模式、</li>
<li>职责链模式、</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>结构型设计模式</h1>
<ul>
<li>适配器模式</li>
<li>桥接模式</li>
<li>组合模式</li>
<li>装饰者模式</li>
<li>外观模式</li>
<li>亨元模式</li>
<li>代理模式</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>单例模式</h1>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<pre><code>class DataBase
{

    private static $_instance = null;

    private function __construct()
    {
        $connect = &quot;连接数据库操作&quot;;
    }

    private function __clone()
    {}

    public static function getInstance()
    {
        if (! self::$_instance) {
            self::$_instance = new DataBase();
            self::$_msg = &quot;这是一个新对象&quot; . &quot;&lt;br&gt;&quot;;
        } else {
            self::$_msg = &quot;这个是一个旧的对象&quot; . &quot;&lt;br&gt;&quot;;
        }
        return self::$_instance;
    }
}
</code></pre>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>工厂模式</h1>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>举个例子：计算</h1>
<pre><code>class Calc
{
    public function calculate($num1, $num2, $operator)
    {
        try {
            $result = 0;
            switch ($operator) {
                case &#39;+&#39;:
                    $result = $num1 + $num2;
                    break;
                case &#39;/&#39;:
                    if ($num2 == 0) {
                        throw new Exception(&quot;除数不能为0&quot;);
                    }
                    $result = $num1 / $num2;
                    break;
            }
            return $result;
        } catch (Exception $e) {
            echo &quot;您输入有误:&quot; . $e-&gt;getMessage();
        }
    }
}
$test = new Calc();
echo $test-&gt;calculate(2, 3, &#39;+&#39;); // 打印:5
echo $test-&gt;calculate(5, 0, &#39;/&#39;); // 打印:您输入有误:除数不能为0
</code></pre><h3>问题：这会要新加 乘方,开方,对数,三角函数,统计等</h3>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>添加分支语句</h1>
<pre><code>class Calc
{
    public function calculate($num1, $num2, $operator)
    {
        try {
            $result = 0;
            switch ($operator) {
                // ......省略......
                case &#39;%&#39;:
                    $result = $num1 % $num2;
                    break;
                // ......省略......
            }
        } catch (Exception $e) {
            echo &quot;您输入有误:&quot; . $e-&gt;getMessage();
        }
    }
}
</code></pre><ul>
<li>需要改动原有的代码块，可能会在为了“添加新功能”而改动原有代码的时候，不小心将原有的代码改错了</li>
<li>如果要添加的功能很多，这样就需要在switch语句中添加N个分支语句。想象下，一个计算功能的函数如果有二三十个case分支语句，代码将超过一屏，不仅令代码的可读性大大降低，关键是，为了添加小功能，还得让其余不相关都参与解释，这令程序的执行效率大大降低</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>怎么解决？</h1>
<ul>
<li>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起</li>
<li>针对接口编程，不针对实现编程</li>
<li>多用组合，少用继承;</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>简单工厂模式的初步实现</h2>
<pre><code>/*
 * 操作类 因为包含有抽象方法，所以类必须声明为抽象类
 */
abstract class Operation
{
    abstract public function getValue($num1, $num2); // 强烈要求子类必须实现该功能函数
}
/**
 * 加法类
 */
class OperationAdd extends Operation
{
    public function getValue($num1, $num2)
    {
        return $num1 + $num2;
    }
}
/**
 * 减法类
 */
class OperationSub extends Operation
{
    public function getValue($num1, $num2)
    {
        return $num1 - $num2;
    }
}
</code></pre><p>通过采用面向对象的继承，多态特性，我们可以很容易 就能对原有程序进行扩展，比如:乘方，开方，对数，三角函数，统计等等</p>
<p>现在还有一个问题,如何使用？如何让程序根据用户输入的操作符实例化相应的对象呢？</p>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>工厂模式实现</h1>
<pre><code>class Factory
{
    public static function createObj($operate)
    {
        switch ($operate) {
            case &#39;+&#39;:
                return new OperationAdd();
                break;
            case &#39;-&#39;:
                return new OperationSub();
                break;
            case &#39;*&#39;:
                return new OperationSub();
                break;
            case &#39;/&#39;:
                return new OperationDiv();
                break;
        }
    }
}
//业务代码
$test = Factory::createObj(&#39;/&#39;);
$result = $test-&gt;getValue(23, 0);
echo $result;
</code></pre>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>工厂模式 --- 只要是可以根据不同的参数生成不同的类实例，那么就符合工厂模式的设计思想。</h2>
<pre><code>class DbFactory
{
    public static function factory ($db_class_name)
    {
        $db_class_name = strtolower($db_class_name);

        if (include_once &#39;Drivers/&#39; . $db_class_name . &#39;.php&#39;)
        {
            $classname = &#39;Driver_&#39; . $db_class_name;

            return new $db_class_name();
        }
        else
        {
            throw new Exception(&#39;对应的数据库类没找到&#39;);
        }
    }
}
</code></pre><pre><code>// 连接mysql
$connect = DbFactory::factory(&quot;mysql&quot;);
// 连接oracle
$connect = DbFactory::factory(&quot;oracle&quot;);
</code></pre>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>策略模式</h1>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h6>一家公司的员工都是做公交车上班，一段时间下来，都挺正常的。</h6>
<pre><code>class Person
{
    public function work()
    {
        echo &quot;坐公交车上班&quot;;
    }
}

class Sky extends Person{}

class Someone extends Person{}
</code></pre><p>后来我不想坐公交车了。要做地铁。</p>
<p>问题来了：其他人还是坐公交车。</p>
<p>解决1:
   *用重载的方式，把work()方法设置为空. 不通的人分别实现不同的上班方式。</p>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h3>把Person超类做成接口，子类实现各自的功能</h3>
<pre><code>interface Person
{
    abstract function work();
}
class Sky extends Person
{
    public function work(){
        echo &quot;地铁上班&quot;;
    }
}
class Someone extends Person{
    public function work(){
        echo &quot;公交车上班&quot;;
    }
}
</code></pre><p>问题：</p>
<p>如果以后我们再有别的成员加入，那我么还要这么处理吗?  </p>
<p>  ——那么代码重复了!</p>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h4>策略模式</h4>
<pre><code>interface WorkBehavior 
{
    abstract public function work();
}
class BusWork implements WorkBehavior
{
    public function work(){ echo &quot;公交车上班&quot;;   }
}
class SubWayWork implements WorkBehavior
{
    public function work() {echo &quot;地铁上班&quot;;}
}
class Person
{
    public function setWorkBehavior(WorkBehavior $behavior)
    {
        $this-&gt;behavior = $behavior;
    }
    public function work()
    {
        $this-&gt;behavior-&gt;work();
    }
}
class Sky extends Person();

$sky = new Sky;//实例化
$sky-&gt;setWorkBehavior(new BusWork);//设置上班行为
$sky-&gt;work();//上班
</code></pre>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h4>观察者模式</h4>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h3>举个例子</h3>
<ul>
<li>一个空气检测站，不同的地区要根据检测站的天气数据变化而采取不通的措施，</li>
</ul>
<h3>这样的场景就是很典型的观察者模式。</h3>
<ul>
<li>首先找出会变化的部分：天气数据／地区数量</li>
<li>空气检测站和不同地区都用接口（interface）。观察者利用主题的接口向主题注册，而主题利用观察者接口通知观察者。</li>
<li>利用“组合”将许多观察者组合进主题中</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h4>观察者模式代码</h4>
<pre><code>class Weather
{
    private $_observers = array();
    // 注册观察者 
    public function register($sub)
    { 
        $this-&gt;_observers[] = $sub;
    }
    // 外部统一访问
    public function trigger()
    { 
        if (! empty($this-&gt;_observers)) {
            foreach ($this-&gt;_observers as $observer) {
                $observer-&gt;update();
            }
        }
    }
}
// 观察者要实现的接口
interface Observerable
{
    public function update();
}
class Subscriber implements Observerable
{
    public function update()
    {
        echo &quot;Callback\n&quot;;
    }
}
</code></pre>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<pre><code>$Weather = new Weather(); //测试代码
$Weather-&gt;register(new Subscriber());
$Weather-&gt;register(new Subscriber1());
$Weather-&gt;register(new Subscriber2());
$Weather-&gt;trigger();
</code></pre>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<ul>
<li>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起</li>
<li>针对接口编程，不针对实现编程</li>
<li>多用组合，少用继承;</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h3>为什么要用设计模式？</h3>
<img src="./life.png" alt="测试文件路径">

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>“好的设计模式不会直接进入你的代码中，而是进入你的大脑中。”</h1>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>END!</h1>
<h1>FAQ!</h1>

</article></section></slide>
        

        <!-- <slide class="slide logoslide dark nobackground">
            <article class="flexbox vcenter">
                <h2 style="color: white;">Powered By nodePPT v1.4.2</h2>
            </article>
        </slide> -->
        <div class="slideTip" id="tip"></div>
    </slides>
</div>
<canvas id="drawBoard" class="draw-board" width="900" height="700"></canvas>
<div class="progress"><span id="progress"></span></div>
<div id="_buttons">
    <div class="_btn-box" id="_btn-box" style="display:none;">
        <button class="fa fa-arrow-circle-left" id="_btn-prev"></button>
        <button class="fa fa-arrow-circle-right" id="_btn-next"></button>
        <button class="fa fa-paint-brush" id="_btn-brush"></button>
        <button class="fa fa-compress" id="_btn-overview" data-toggle="fa fa-expand"></button>
    </div>
    <button class="fa fa-bars" id="_btn-bar"  data-toggle="fa fa-close"></button>
</div>
<script src="./js/mixjs/lib/mix.0.3.0.min.js"></script>
<script>
var base = location.protocol + '//' + location.host;

var path = (location.pathname + '#').split('/').filter(function(v){
    return !!v;
});
path.pop();
path = path.join('/');
MixJS.config({
    baseURL: [ base, path, 'js'].join('/')+'/'
});

</script>
<script src="./js/mixjs/lib/event/broadcast.js"></script>
<script src="./js/nodeppt.js"></script>
<script>
Slide.init({
    containerID: 'container',
    drawBoardID: 'drawBoard',
    slideClass: '.slide',
    buildClass: '.build',
    progressID: 'progress',
    transition: 'move',
    width: 1100,
    dir: './',
    
    //打开下面的注释就开启postMessage方式
    //访问网址127.0.0.1:8080/ppt/demo#client
    control:{
        type: 'postMessage',
        args:{
            isControl:  false
        }
    },
    
    tipID: 'tip'
});
MixJS.loadJS('highlight/highlight.pack.js',function(){
    hljs.tabReplace = '  ';
    hljs.initHighlightingOnLoad();
});
</script>


<!--placeholder-->
</body>
</html>
